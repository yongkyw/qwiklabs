You have completed the following tasks using the Cloud SDK tool, gcloud:

# Installed and configured the gcloud client
# Created and switched between multiple IAM configurations
# Identified and assigned correct IAM permissions
# Created and used a service account


Task 1. Configure the gcloud environment

# Confirm that gcloud is successfully installed. Inside the SSH session run:
gcloud --version

# Creating a new instance and updating the default zone
gcloud auth login
y
Navigate to the link displayed in a new tab.
Click on your active username (), and click Allow.
When you see the prompt Enter the following verification code in gcloud CLI on the machine you want to log into, click on the copy button then go back to the SSH session, and paste the code into the prompt Enter authorization code:.

# Inside the SSH session run:
gcloud compute instances create lab-1

# Check your current gcloud configuration. Inside the SSH session run:
gcloud config list

# Now list all the zones available to use by running the following inside the SSH session run:
gcloud compute zones list

# Change your current zone for another zone in the same region. Inside the SSH session run the following, replacing ZONE with the zone you selected:
gcloud config set compute/zone ZONE

# Verify the zone change was made. Inside the SSH session run:
gcloud config list

cat ~/.config/gcloud/configurations/config_default


Task 2. Create and switch between multiple IAM configurations

# Create a new IAM configuration
# Start a new gcloud configuration for the second user account. Inside the SSH session run:
gcloud init --no-launch-browser
2
Type user2
option 3
y
Navigate to the link displayed in a new tab.
Click Use another account
Copy the second user account (), and paste into the email or phone prompt
Copy the same password that you started the lab with, and paste into the enter your password prompt.
Accept
Allow
When you see the prompt Enter the following verification code in gcloud CLI on the machine you want to log into, click on the copy button then go back to the SSH session and paste the code into the prompt Enter authorization code:.
For Pick cloud project to use: locate your current project () and then type in the number that corresponds to the project.

# Test the new account
# Check that you can view details in the first project. Inside the SSH session run:
gcloud compute instances list

# Check that you cannot create an instance in the first project, as your assigned role is basic viewer. Inside the SSH session run:
gcloud compute instances create lab-2

# Change back to your first user's configuration (default). Inside the SSH session run:
gcloud config configurations activate default

Task 3. Identify and assign correct IAM permissions

# Examine roles and permissions
# To view all the roles, run the following inside the SSH session run:
gcloud iam roles list | grep "name:"

# Examine the compute.instanceAdmin predefined role. Inside the SSH session run:
gcloud iam roles describe roles/compute.instanceAdmin

# Grant access to the second user to the second project
# Switch gcloud configuration back to the second user (user2). Inside the SSH session run:
gcloud config configurations activate user2

echo "export PROJECTID2=""" >> ~/.bashrc

. ~/.bashrc
gcloud config set project $PROJECTID2

Note: When prompted, Do you want to continue (Y/n)?, type N and press ENTER.

# Assign the viewer role to the second user in the second project

gcloud config configurations activate default

sudo yum -y install epel-release
sudo yum -y install jq

echo "export USERID2=""" >> ~/.bashrc

. ~/.bashrc
gcloud projects add-iam-policy-binding $PROJECTID2 --member user:$USERID2 --role=roles/viewer


Task 4. Test that user2 has access

# Switch your gcloud configuration to user2. Inside the SSH session run:
gcloud config configurations activate user2

# Change the configuration for user2 to the second project. Inside the SSH session run:
gcloud config set project $PROJECTID2

# Verify you have viewer access. Inside the SSH session run:
gcloud compute instances list

# Try to create an instance in the second project as the second user. Inside the SSH session run:
gcloud compute instances create lab-2

# Switch your gcloud configuration to default. Inside the SSH session run:
gcloud config configurations activate default

# Create a new role with permissions
# Create a custom role called devops that has the permissions to create an instance. Inside the SSH session run:
gcloud iam roles create devops --project $PROJECTID2 --permissions "compute.instances.create,compute.instances.delete,compute.instances.start,compute.instances.stop,compute.instances.update,compute.disks.create,compute.subnetworks.use,compute.subnetworks.useExternalIp,compute.instances.setMetadata,compute.instances.setServiceAccount"
# This command creates a custom role in the project called devops with the permissions to create and manage instances.

# Bind the role to the second account to both projects
# Bind the role of iam.serviceAccountUser to the second user onto the second project. Inside the SSH session run:
gcloud projects add-iam-policy-binding $PROJECTID2 --member user:$USERID2 --role=roles/iam.serviceAccountUser
# Inside the SSH session run:
gcloud projects add-iam-policy-binding $PROJECTID2 --member user:$USERID2 --role=projects/$PROJECTID2/roles/devops

# Test the newly assigned permissions.
# Switch your gcloud configuration to user2. Inside the SSH session run:
gcloud config configurations activate user2

# Try to create an instance called lab-2. Inside the SSH session run:
gcloud compute instances create lab-2

# Verify the instance exists. Inside the SSH session run:
gcloud compute instances list


Task 5. Using a service account

# Create a service account
# Switch your gcloud configuration to default, user2 doesn't have the rights to set up and configure service accounts. Inside the SSH session run:
gcloud config configurations activate default

# Set the project to PROJECTID2 in your configuration. Inside the SSH session run:
gcloud config set project $PROJECTID2

# Create the service account. Inside the SSH session run:
gcloud iam service-accounts create devops --display-name devops

# Get the service account email address. Inside the SSH session run:
gcloud iam service-accounts list  --filter "displayName=devops"

# Put the email address into a local variable called SA. Inside the SSH session run:
SA=$(gcloud iam service-accounts list --format="value(email)" --filter "displayName=devops")

# Give the service account the role of iam.serviceAccountUser. Inside the SSH session run:
gcloud projects add-iam-policy-binding $PROJECTID2 --member serviceAccount:$SA --role=roles/iam.serviceAccountUser


Task 6. Using the service account with a compute instance

# Give the service account the role of compute.instanceAdmin. Inside the SSH session run:
gcloud projects add-iam-policy-binding $PROJECTID2 --member serviceAccount:$SA --role=roles/compute.instanceAdmin

# Create an instance with the devops service account attached. You also have to specify an access scope that defines the API calls that the instance can make. Inside the SSH session run:
gcloud compute instances create lab-3 --service-account $SA --scopes "https://www.googleapis.com/auth/compute"


Task 7. Test the service account

# Connect to the newly created instance using gcloud compute ssh
gcloud compute ssh lab-3

# The default image used already contains gcloud configuration
gcloud config list

# Create an instance.
gcloud compute instances create lab-4

# Check roles
gcloud compute instances list


