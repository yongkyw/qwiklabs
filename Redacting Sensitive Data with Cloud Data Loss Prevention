gcloud config set compute/region us-central1


Task 1. Clone the repo and enable APIs


git clone https://github.com/googleapis/synthtool

cd synthtool/tests/fixtures/nodejs-dlp/samples/ && npm install

export PROJECT_ID=qwiklabs-gcp-03-17eec27756d5
gcloud config set project $PROJECT_ID

# Enable APIs
gcloud services enable dlp.googleapis.com cloudkms.googleapis.com \
--project $PROJECT_ID


Task 2. Inspect strings and files


node inspectString.js $PROJECT_ID "My email address is jenny@somedomain.com and you can call me at 555-867-5309" > inspected-string.txt

cat inspected-string.txt

cat resources/accounts.txt

node inspectFile.js $PROJECT_ID resources/accounts.txt > inspected-file.txt

cat inspected-file.txt

# Below is the asynchronous function that uses the API to inspect the string input:
async function inspectString(
  ProjectId,
  string,
  minLikelihood,
  maxFindings,
  infoTypes,
  customInfoTypes,
  includeQuote
) {
...
}

# The arguments provided for the parameters above are used to construct a request object. That request is then provided to the inspectContent function to get a response that results in the output:
// Construct item to inspect
const item = {value: string};
// Construct request
const request = {
  parent: `projects/${projectId}/locations/global`,
  inspectConfig: {
    infoTypes: infoTypes,
    customInfoTypes: customInfoTypes,
    minLikelihood: minLikelihood,
    includeQuote: includeQuote,
    limits: {
      maxFindingsPerRequest: maxFindings,
    },
  },
  item: item,
};
// Run request
const [response] = await dlp.inspectContent(request);

# Upload output to Cloud Storage
gsutil cp inspected-string.txt gs://qwiklabs-gcp-03-17eec27756d5-bucket
gsutil cp inspected-file.txt gs://qwiklabs-gcp-03-17eec27756d5-bucket


Task 3. De-identification


node deidentifyWithMask.js $PROJECT_ID "My order number is F12312399. Email me at anthony@somedomain.com" > de-identify-output.txt

cat de-identify-output.txt

# Look at the function that uses the DLP API to de-identify with a mask. Once again, these arguments are used to construct a request object. This time it's provided to the deidentifyContent function:
async function deidentifyWithMask() {
    const request = {
      parent: `projects/${projectId}/locations/global`,
      deidentifyConfig: {
        infoTypeTransformations: {
          transformations: [
            {
              primitiveTransformation: {
                characterMaskConfig: {
                  maskingCharacter: maskingCharacter,
                  numberToMask: numberToMask,
                },
              },
            },
          ],
        },
      },
      item: item,
    };
    // Run deidentification request
    const [response] = await dlp.deidentifyContent(request);

# Upload output to Cloud Storage
gsutil cp de-identify-output.txt gs://qwiklabs-gcp-03-17eec27756d5-bucket


Task 4. Redact strings and images


node redactText.js $PROJECT_ID  "Please refund the purchase to my credit card 4012888888881881" CREDIT_CARD_NUMBER > redacted-string.txt

cat redacted-string.txt

# To redact the phone number from the image
node redactImage.js $PROJECT_ID resources/test.png "" PHONE_NUMBER ./redacted-phone.png

# Try it again to redact the email address from the image
node redactImage.js $PROJECT_ID resources/test.png "" EMAIL_ADDRESS ./redacted-email.png

# Here is the function that is used to redact from a string:
async function redactText(
  callingProjectId,
  string,
  minLikelihood,
  infoTypes
) {
...}

# And here is the request provided to the deidentifyContent function:
const request = {
    parent: `projects/${projectId}/locations/global`,
    item: {
      value: string,
    },
    deidentifyConfig: {
      infoTypeTransformations: {
        transformations: [replaceWithInfoTypeTransformation],
      },
    },
    inspectConfig: {
      minLikelihood: minLikelihood,
      infoTypes: infoTypes,
    },
  };
  const [response] = await dlp.deidentifyContent(request);
  
# Similarly, here is the function for redacting an image:
async function redactImage(
  callingProjectId,
  filepath,
  minLikelihood,
  infoTypes,
  outputPath
) {
...}

# And here is the request provided to the redactImage function:
// Construct image redaction request
    const request = {
      parent: `projects/${projectId}/locations/global`,
      byteItem: {
        type: fileTypeConstant,
        data: fileBytes,
      },
      inspectConfig: {
        minLikelihood: minLikelihood,
        infoTypes: infoTypes,
      },
      imageRedactionConfigs: imageRedactionConfigs,
    };

# Upload output to Cloud Storage
gsutil cp redacted-string.txt gs://qwiklabs-gcp-03-17eec27756d5-bucket
gsutil cp redacted-phone.png gs://qwiklabs-gcp-03-17eec27756d5-bucket
gsutil cp redacted-email.png gs://qwiklabs-gcp-03-17eec27756d5-bucket